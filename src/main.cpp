#include <iostream>
#include <string>
#include <cstdlib>
#include <vector>

#include "color.hpp"
#include "segment.hpp"

template<typename OutputIterator>
auto
printJoined(
        OutputIterator begin,
        OutputIterator const end,
        std::ostream& out,
        std::string const& delim)
    -> void
{
    if(begin == end) {
        return;
    }

    out << *begin;
    while(++begin != end) {
        out << delim << *begin;
    }
}


auto
main() -> int
{
    Segments const segments = parseSegments(std::cin);
    
    std::cout.precision(5);
    std::cout.setf(std::ios::fixed);
    std::cout << "/*** generated by ggr2glsl ***/\n";
    std::cout << "vec4 gen(float value) {\n";

    auto const printData = [](
            auto const& data,
            std::string const& name,
            std::string const& type) {
        std::cout << "    " << type << " const " << name
            << "[" << data.size() << "] = " << 
            type << "[" << data.size() << "](\n";

        std::cout << "        ";
        printJoined(data.begin(), data.end(), std::cout, ",\n        ");

        std::cout << "\n    );\n\n";
    };

    printData(segments.left, "left", "float");
    printData(segments.middle, "middle", "float");
    printData(segments.right, "right", "float");
    printData(segments.leftColor, "leftColor", "vec4");
    printData(segments.rightColor, "rightColor", "vec4");
    printData(segments.blendType, "blendType", "int");
    printData(segments.colorType, "colorType", "int");

    std::cout
        << "    int first = 0;\n"
        << "    int last = " << segments.size()-1 << ";\n";

    std::cout <<
R"(
    while(first != last) {
        int i = (first+last) / 2;
        if(value <= right[i]) {
            last = i;
        }
        else {
            first = i + 1;
        }
    }
    int index = first;

    float normalized = (value - left[index]) / (right[index] - left[index]);
    return mix(leftColor[index], rightColor[index], normalized);
)";


    // Closing function bracket
    std::cout << "}\n";
}
